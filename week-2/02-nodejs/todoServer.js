/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");
const fs = require("fs");
const { log } = require("console");

const app = express();

app.use(bodyParser.json());
// ******************Using File **************************
let todoList = [];
let count = 1;

const readData = (req, res, next) => {
  fs.readFile("todoData.txt", "utf-8", (err, data) => {
    if (data) {
      const pureData = JSON.parse(data);

      count = pureData.cnt;
      todoList = pureData.list;
    }
  });
  next();
};

app.use(readData);

app.get("/todos", (req, res) => {
  // console.log(todoList);
  res.status(200).json(todoList);
});

app.post("/todos", (req, res) => {
  const data = req.body;

  let new_todo = { id: count++, ...data };
  todoList.push(new_todo);
  let fullData = { cnt: count - 1, list: todoList };
  fs.writeFile("todoData.txt", JSON.stringify(fullData), "utf-8", (err) => {});
  res.status(201).json({ id: count - 1 });
});

app.get("/todos/:id", (req, res) => {
  const targetId = req.params.id;
  let todo = todoList.find((obj) => obj.id == targetId);
  //console.log(targetId);
  if (todo) {
    res.status(200).json(todo);
  } else {
    //console.log(todo);
    res.status(404).json({ msg: "No Todo Exists" });
  }
});
app.put("/todos/:id", (req, res) => {
  const updated_todo = req.body;
  const targetId = req.params.id;
  let flag = false;
  todoList.find((obj) => {
    if (obj.id == targetId) {
      flag = true;
      obj.title = updated_todo.title;
      obj.description = updated_todo.description;
      obj.completed = updated_todo.completed;
      let fullData = { cnt: count, list: todoList };
      fs.writeFile(
        "todoData.txt",
        JSON.stringify(fullData),
        "utf-8",
        (err) => {}
      );
    }
  });
  if (!flag) {
    res.status(404).json({ msg: "No Such Todo Exist" });
  } else res.status(200).json({ msg: "Done" });
});

app.delete("/todos/:id", (req, res) => {
  const targetId = req.params.id;
  const index = todoList.findIndex((obj) => obj.id == targetId);

  if (index !== -1) {
    todoList.splice(index, 1);
    let fullData = { cnt: count, list: todoList };
    fs.writeFile(
      "todoData.txt",
      JSON.stringify(fullData),
      "utf-8",
      (err) => {}
    );
    res.sendStatus(200);
  } else res.sendStatus(404);
});
//app.listen(3000, () => console.log("Server Started"));
module.exports = app;

// ******************Using Array only*******************************
// let todoList = [];
// let count = 1;

// app.get("/todos", (req, res) => {
//   res.status(200).json(todoList);
// });

// app.post("/todos", (req, res) => {
//   const data = req.body;

//   let new_todo = { id: count++, ...data };
//   todoList.push(new_todo);
//   res.status(201).json({ id: count - 1 });
// });

// app.get("/todos/:id", (req, res) => {
//   const targetId = req.params.id;
//   let todo = todoList.find((obj) => obj.id == targetId);
//   //console.log(targetId);
//   if (todo) {
//     res.status(200).json(todo);
//   } else {
//     //console.log(todo);
//     res.status(404).json({ msg: "No Todo Exists" });
//   }
// });
// app.put("/todos/:id", (req, res) => {
//   const updated_todo = req.body;
//   const targetId = req.params.id;
//   let flag = false;
//   todoList.find((obj) => {
//     if (obj.id == targetId) {
//       flag = true;
//       obj.title = updated_todo.title;
//       obj.description = updated_todo.description;
//       obj.completed = updated_todo.completed;
//     }
//   });
//   if (!flag) {
//     res.status(404).json({ msg: "No Such Todo Exist" });
//   } else res.status(200).json({ msg: "Done" });
// });

// app.delete("/todos/:id", (req, res) => {
//   const targetId = req.params.id;
//   const index = todoList.findIndex((obj) => obj.id == targetId);

//   if (index !== -1) {
//     todoList.splice(index, 1);
//     res.sendStatus(200);
//   } else res.sendStatus(404);
// });
